plugins {
    id 'java'
    //id 'jacoco'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21' apply false
}

sourceCompatibility = '17'

/**
 * Пока используется hibernate, нужен javax.persistence-api:2.2.
 * Поэтому без jcenter никак.
 * До 2022-02-01 (закрытие jcenter) надо что то решать .
 */
//repositories {
    //google()
    //mavenCentral()
//}

/*allprojects {
    repositories {
        //google()
        mavenCentral()
        //jcenter()
    }
}*/

dependencies {
    //implementation fileTree(include: ['*.jar'], dir: 'libs')

    //implementation files('../Libs/SWJC/build/libs/SWJC.jar')
    //implementation files('../Libs/UKAPI/build/libs/UKAPI.jar')
    
    testImplementation     'junit:junit:4.13'

    // Persistence (jakarta)
    //implementation 'javax.persistence:persistence-api:1.0.2'
    //implementation 'javax.persistence:javax.persistence-api:2.2'

    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    //implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    //implementation 'jakarta.xml.bind:jaxb-api:4.0.0'

    //implementation 'org.jvnet.jaxb2.maven2:maven-jaxb2-plugin'
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.0'

    //implementation 'org.jvnet.jaxb:jaxb-maven-plugin:2.0.0'
    //implementation 'org.jvnet.jaxb2.maven2:maven-jaxb2-plugin:0.14.0'
    
    //Utils
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.commons:commons-text:1.4'
    
    //JDBC PostgreSQL
    //implementation 'org.postgresql:postgresql:42.2.10'
    
    //JDBC Oracle
    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    implementation 'com.oracle.ojdbc:orai18n:19.3.0.0'

    //SMB
    //implementation 'com.hierynomus:smbj:0.10.0'
    
    //
    //implementation 'org.springframework:spring-core:5.2.6.RELEASE'
    //implementation 'org.springframework:spring-core:5.2.6.RELEASE'
    
    //Hibernate
    //implementation 'org.hibernate:hibernate-core:5.4.0.Final'
    //implementation 'org.hibernate:hibernate-entitymanager:5.4.0.Final'

    implementation 'org.hibernate:hibernate-core-jakarta:5.6.15.Final'
    //implementation 'org.hibernate:hibernate-entitymanager:6.0.0.Alpha7'
    
    //OrmLite
    //implementation 'com.j256.ormlite:ormlite-core:5.1'
    //implementation 'com.j256.ormlite:ormlite-jdbc:5.1'
    
    //Lombok
    //compileOnly 'org.projectlombok:lombok:1.12.6'
    //annotationProcessor 'org.projectlombok:lombok:1.12.6'
    
    //Json
    implementation 'com.google.code.gson:gson:2.8.6'
    //implementation 'com.squareup.moshi:moshi:1.9.2'

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    //Modules
    implementation project(path: ':swlc')
    implementation project(path: ':ukapi')
}

version = '2.7.20'
mainClassName = 'com.uralkali.server.MainClass'

project.configurations.implementation.setCanBeResolved(true)

//println configurations.implementation.resolve()


println '### DEV_INFO ###'
println 'version: ' + version
println sourceSets.main.java.srcDirs
println sourceSets.main.resources.srcDirs
println '###'

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Implementation-Title' : "Gradle Jar File"
        attributes 'Implementation-Version' : version
        attributes 'Main-Class' : mainClassName
        //attributes 'Class-Path' : configurations.implementation.collect { 'lib/' + it.name }.join(' ')
        
    }
    
    baseName = project.name
    
    //dependsOn ('dependencies')

    //Fat jar
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}
/*
task sourcesJar(type: Jar) {
    
    classifier = 'sources'
    from sourceSets.main.allSource
}*/

//it.getName()
//it.absolutePath
//it.toURI().toString()

/*task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title' : "Gradle Jar File"
        attributes 'Implementation-Version' : version
        attributes 'Main-Class' : mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}*/




